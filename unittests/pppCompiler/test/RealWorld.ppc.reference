# autogenerated 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSMicrowave 2
const PMTChannel 8
const CalibrationCounterNo 5
const PiTimeChannel 1
const DebugChannel 2
const DebugChannel2 3
# variables 
var NULL 0
var FFFFFFFF 18446744073709551615
var INTERRUPT_EXITCODE 18446198715942174720
var inlinevar_3 1
var inlinevar_4 2
var inlinevar_5 8
var inlinevar_6 5
var inlinevar_7 3
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var MicrowaveFreq 40, parameter, MHz, AD9912_FRQ
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var InitializationShutter 1, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var PreWaitTime 0, parameter, ms
var MicrowaveInitTime 0, parameter, ms
var GateInit 1, parameter
var QubitWaitTime 0, parameter, ms
var MicrowaveAnalyzeTime 0, parameter, ms
var PostWaitTime 0, parameter, ms
var DetectTime 1, parameter, ms
var piTime 40, parameter, us
var GateTime 0, parameter
var PostPulseWaitTime 0, parameter, ms
var MaxInitRepeat 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsMicrowaveApply 0, trigger
var PresenceThreshold 6, parameter
var UseGateSequence 0, parameter
var offset 40, parameter, ns
var IonLostExitcode 0xfffe0001, exitcode
var endLabel 0xfffe0000, exitcode
var experimentsleft 100
var initRemaining 0
var trainPhase 0
var pulseTime 0, parameter
var gapTime 0, parameter
var PulsesRemaining 0
var RamStartAddress 0, address
var currentexperiment 0
var coolPhotons 0
var NumberIgnoredBits 0, parameter
var CalibrateEvery 0, parameter
var DetectThreshold 1, parameter
var CalibrationGates 0, parameter
var PiTimeIntegrator 0
var CalibrationSkipCounter 0
var MicrowaveCalibrationTime 0
var CalibrationCounters 0, counter
var CalibrationDetectPhotons 0
var temp 0
var one 1
# inline variables
# end header

# line 192: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 193: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 194: procedurecall set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 195: procedurecall set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 196: procedurecall set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 197: shiftexpression PiTimeIntegrator = GateTime << NumberIgnoredBits
  LDWR GateTime
  SHL NumberIgnoredBits
# line 197 assignment PiTimeIntegrator = GateTime << NumberIgnoredBits
  STWR PiTimeIntegrator
# line 199 while_statement while not pipe_empty():
while_label_1: NOP
    JMPPIPEEMPTY end_while_label_1
# line 200: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 201: procedurecall     apply_next_scan_point()
  JMPNINTERRUPT apply_next_scan_point_label_0
  LDWR INTERRUPT_EXITCODE
  WAIT
  WRITEPIPE
  END
apply_next_scan_point_label_0:  READPIPEINDF
  WRITEPIPEINDF
  READPIPE
  WRITEPIPE
  STWI
  JMPCMP apply_next_scan_point_label_0
# line 203 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 204 while_statement     while currentexperiment < experiments:
while_label_2: NOP
# line 204 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_2
# line 205: procedurecall         set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 206: procedurecall         cool()
# line 82: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 84: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 85: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 86: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 87 assignment     coolPhotons = load_count( PMTChannel )
# line 87: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 88: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 207 if statement         if MaxInitRepeat>0:
# line 207 condition         if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_3
# IF block
# line 208 assignment             initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 209 while_statement             while coolPhotons<PresenceThreshold:
while_label_4: NOP
# line 209 condition             while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_4
# line 210 if statement                 if initRemaining==0:
# line 210 condition                 if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_5
# IF block
# line 211: procedurecall                     exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_5: NOP
# end if
# line 212: add_assignment:                 initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 213: procedurecall                 cool()
# line 82: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 84: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 85: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 86: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 87 assignment     coolPhotons = load_count( PMTChannel )
# line 87: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 88: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_4
end_while_label_4: NOP
# end while
end_if_label_3: NOP
# end if
# line 214 if statement         if PumpTime>0:
# line 214 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_6
# IF block
# line 215: procedurecall             pump()
# line 91: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 92: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 93: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_6: NOP
# end if
# line 216 if statement         if PreWaitTime>0:
# line 216 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_7
# IF block
# line 217: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_7: NOP
# end if
# line 218 if statement         if MicrowaveInitTime>0: 
# line 218 condition         if MicrowaveInitTime>0: 
  LDWR MicrowaveInitTime
  JMPZ end_if_label_8
# IF block
# line 219: procedurecall             qubitInit()
# line 96: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 97: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 98: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 99: procedurecall     update( MicrowaveInitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveInitTime
# line 100: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_8: NOP
# end if
# line 220 if statement         if GateInit>0: 
# line 220 condition         if GateInit>0: 
  LDWR GateInit
  JMPZ end_if_label_9
# IF block
# line 221: procedurecall            gateInit()
# line 103: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 104: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 105: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 106 assignment     temp = GateTime
  LDWR GateTime
  STWR temp
# line 107: add_assignment:     temp *= GateInit
  LDWR temp
  MULTW GateInit
  STWR temp
# line 108: procedurecall     update( temp )
  WAITDDSWRITEDONE
  WAIT
  UPDATE temp
# line 109: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_9: NOP
# end if
# line 222 if statement         if UseGateSequence>0:
# line 222 condition         if UseGateSequence>0:
  LDWR UseGateSequence
  JMPZ end_if_label_10
# IF block
# line 223: procedurecall             gateSequence()
# line 146 assignment     PulsesRemaining = read_ram() 
# line 146: procedurecall     PulsesRemaining = read_ram() 
  RAMREAD
  STWR PulsesRemaining
# line 147 while_statement     while PulsesRemaining>0:
while_label_11: NOP
# line 147 condition     while PulsesRemaining>0:
  LDWR PulsesRemaining
  JMPZ end_while_label_11
# line 148: add_assignment:         PulsesRemaining -= 1
  DEC PulsesRemaining
  STWR PulsesRemaining
# line 149 assignment         trainPhase = read_ram()
# line 149: procedurecall         trainPhase = read_ram()
  RAMREAD
  STWR trainPhase
# line 150 assignment         gapTime = read_ram()
# line 150: procedurecall         gapTime = read_ram()
  RAMREAD
  STWR gapTime
# line 151 if statement         if gapTime>0:
# line 151 condition         if gapTime>0:
  LDWR gapTime
  JMPZ end_if_label_12
# IF block
# line 152: procedurecall             set_dds( channel=DDSMicrowave, phase=trainPhase )
  DDSPHS DDSMicrowave, trainPhase
# line 153: procedurecall             set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 154: procedurecall             update( gapTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE gapTime
end_if_label_12: NOP
# end if
# line 155 assignment         pulseTime = read_ram()     # has to be given in units of pi/2 time
# line 155: procedurecall         pulseTime = read_ram()     # has to be given in units of pi/2 time
  RAMREAD
  STWR pulseTime
# line 156: add_assignment:         pulseTime *= GateTime
  LDWR pulseTime
  MULTW GateTime
  STWR pulseTime
# line 157 if statement         if pulseTime>0:
# line 157 condition         if pulseTime>0:
  LDWR pulseTime
  JMPZ end_if_label_13
# IF block
# line 158: add_assignment:             pulseTime += offset     # we don't want an exdended I
  LDWR pulseTime
  ADDW offset
  STWR pulseTime
# line 159: procedurecall             set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 160: procedurecall             update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 161: procedurecall             set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 162: procedurecall             update( PostPulseWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostPulseWaitTime
end_if_label_13: NOP
# end if
  JMP while_label_11
end_while_label_11: NOP
# end while
end_if_label_10: NOP
# end if
# line 224 if statement         if QubitWaitTime>0:
# line 224 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_14
# IF block
# line 225: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_14: NOP
# end if
# line 226 if statement         if MicrowaveAnalyzeTime>0:
# line 226 condition         if MicrowaveAnalyzeTime>0:
  LDWR MicrowaveAnalyzeTime
  JMPZ end_if_label_15
# IF block
# line 227: procedurecall             qubitAnalyze()
# line 119: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveAnalyzePhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveAnalyzePhase
# line 120: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 121: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 122: procedurecall     update( MicrowaveAnalyzeTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveAnalyzeTime
# line 123: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_15: NOP
# end if
# line 228 if statement         if PostWaitTime>0:
# line 228 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_16
# IF block
# line 229: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_16: NOP
# end if
# line 230 if statement         if DetectTime>0:
# line 230 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_17
# IF block
# line 231: procedurecall             detect()
# line 126: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 127: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 128: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 129: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 130: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 131: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 132: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 133: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_17: NOP
# end if
# line 232 if statement         if CalibrateEvery>0:
# line 232 condition         if CalibrateEvery>0:
  LDWR CalibrateEvery
  JMPZ end_if_label_18
# IF block
# line 234: procedurecall             calibrate()
# line 165: procedurecall     cool()
# line 82: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 84: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 85: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 86: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 87 assignment     coolPhotons = load_count( PMTChannel )
# line 87: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 88: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 166 if statement     if MaxInitRepeat>0:
# line 166 condition     if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_19
# IF block
# line 167 while_statement         while coolPhotons<PresenceThreshold:
while_label_20: NOP
# line 167 condition         while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_20
# line 168 if statement             if initRemaining==0:
# line 168 condition             if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_21
# IF block
# line 169: procedurecall                 exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_21: NOP
# end if
# line 170: add_assignment:             initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 171: procedurecall             cool()
# line 82: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     set_counter( CheckIonCounters )
  COUNTERMASK CheckIonCounters
# line 84: procedurecall     update( CoolingTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
# line 85: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 86: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 87 assignment     coolPhotons = load_count( PMTChannel )
# line 87: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 88: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_20
end_while_label_20: NOP
# end while
end_if_label_19: NOP
# end if
# line 172 if statement     if PumpTime>0:
# line 172 condition     if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_22
# IF block
# line 173: procedurecall         pump()
# line 91: procedurecall     set_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
# line 92: procedurecall     update( PumpTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpTime
# line 93: procedurecall     set_inv_shutter( PumpingOn )
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_22: NOP
# end if
# line 174 assignment     MicrowaveCalibrationTime = GateTime
  LDWR GateTime
  STWR MicrowaveCalibrationTime
# line 175: add_assignment:     MicrowaveCalibrationTime *= CalibrationGates
  LDWR MicrowaveCalibrationTime
  MULTW CalibrationGates
  STWR MicrowaveCalibrationTime
# line 176: procedurecall     calibrationPulse()
# line 112: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 113: procedurecall     set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 114: procedurecall     set_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
# line 115: procedurecall     update( MicrowaveCalibrationTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE MicrowaveCalibrationTime
# line 116: procedurecall     set_inv_shutter( MicrowaveOn )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 177 if statement     if DetectTime>0:
# line 177 condition     if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_23
# IF block
# line 178: procedurecall         calibrationDetect()
# line 136: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 137: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 138: procedurecall     set_counter( CalibrationCounters )
  COUNTERMASK CalibrationCounters
# line 139: procedurecall     set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 140: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 141: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 142: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 143: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 179 assignment         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
# line 179: procedurecall         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
  NOP
  LDCOUNT CalibrationCounterNo
  STWR CalibrationDetectPhotons
# line 180 if statement         if CalibrationDetectPhotons > DetectThreshold:
# line 180 condition         if CalibrationDetectPhotons > DetectThreshold:
  LDWR CalibrationDetectPhotons
  CMPGREATER DetectThreshold
  JMPNCMP else_label_24
# IF block
# line 181: add_assignment:             PiTimeIntegrator -= 1
  DEC PiTimeIntegrator
  STWR PiTimeIntegrator
  JMP end_if_label_24
else_label_24: NOP
# ELSE block
# line 183: add_assignment:             PiTimeIntegrator += 1
  INC PiTimeIntegrator
  STWR PiTimeIntegrator
end_if_label_24: NOP
# end if
# line 184: procedurecall         write_result( DebugChannel, CalibrationDetectPhotons )
  WRITERESULTTOPIPE DebugChannel, CalibrationDetectPhotons
# line 185: shiftexpression         GateTime = PiTimeIntegrator >> NumberIgnoredBits
  LDWR PiTimeIntegrator
  SHR NumberIgnoredBits
# line 185 assignment         GateTime = PiTimeIntegrator >> NumberIgnoredBits
  STWR GateTime
# line 186: shiftexpression         piTime = GateTime >> one
  LDWR GateTime
  SHR one
# line 186 assignment         piTime = GateTime >> one
  STWR piTime
# line 187: procedurecall         write_result( PiTimeChannel, PiTimeIntegrator )
  WRITERESULTTOPIPE PiTimeChannel, PiTimeIntegrator
end_if_label_23: NOP
# end if
end_if_label_18: NOP
# end if
# line 238: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_2
end_while_label_2: NOP
# end while
  JMP while_label_1
end_while_label_1: NOP
# end while
# line 240: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END