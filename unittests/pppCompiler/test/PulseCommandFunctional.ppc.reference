# autogenerated
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSDetect 1
const DDSMicrowave 2
const PMTChannel 8
const CalibrationCounterNo 5
const PiTimeChannel 1
const DebugChannel 2
const DebugChannel2 3
# variables
var NULL 0
var FFFFFFFF 18446744073709551615
var INTERRUPT_EXITCODE 18446198715942174720
var inlinevar_3 1
var inlinevar_4 2
var inlinevar_5 8
var inlinevar_6 5
var inlinevar_7 3
var DetectFreq 100, parameter, MHz, AD9912_FRQ
var DetectAmp 1023, parameter
var MicrowaveFreq 40, parameter, MHz, AD9912_FRQ
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var InitializationShutter 1, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var CoolingTime 1, parameter, ms
var PumpTime 0, parameter, ms
var PreWaitTime 0, parameter, ms
var MicrowaveInitTime 0, parameter, ms
var GateInit 1, parameter
var QubitWaitTime 0, parameter, ms
var MicrowaveAnalyzeTime 0, parameter, ms
var PostWaitTime 0, parameter, ms
var DetectTime 1, parameter, ms
var piTime 40, parameter, us
var GateTime 0, parameter
var PostPulseWaitTime 0, parameter, ms
var MaxInitRepeat 10, parameter
var experiments 100, parameter
var CheckIonCounters 0, counter
var DetectCounters 0, counter
var ddsApplyTrigger 3, trigger
var ddsMicrowaveApply 0, trigger
var PresenceThreshold 6, parameter
var UseGateSequence 0, parameter
var offset 40, parameter, ns
var IonLostExitcode 0xfffe0001, exitcode
var endLabel 0xfffe0000, exitcode
var experimentsleft 100
var initRemaining 0
var trainPhase 0
var pulseTime 0, parameter
var gapTime 0, parameter
var PulsesRemaining 0
var RamStartAddress 0, address
var currentexperiment 0
var coolPhotons 0
var NumberIgnoredBits 0, parameter
var CalibrateEvery 0, parameter
var DetectThreshold 1, parameter
var CalibrationGates 0, parameter
var PiTimeIntegrator 0
var CalibrationSkipCounter 0
var MicrowaveCalibrationTime 0
var CalibrationCounters 0, counter
var CalibrationDetectPhotons 0
var temp 0
var one 1
# inline variables
# end header

# line 166: procedurecall set_shutter( InitializationShutter )
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 167: procedurecall set_dds( channel=DDSDetect, freq=DetectFreq, amp=DetectAmp )
  DDSFRQ DDSDetect, DetectFreq
  DDSAMP DDSDetect, DetectAmp
# line 168: procedurecall set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 169: procedurecall set_trigger( ddsApplyTrigger )
  TRIGGER ddsApplyTrigger
# line 170: procedurecall set_trigger( ddsMicrowaveApply )
  TRIGGER ddsMicrowaveApply
# line 171: shiftexpression PiTimeIntegrator = GateTime << NumberIgnoredBits
  LDWR GateTime
  SHL NumberIgnoredBits
# line 171 assignment PiTimeIntegrator = GateTime << NumberIgnoredBits
  STWR PiTimeIntegrator
# line 173 while_statement while not pipe_empty():
while_label_1: NOP
    JMPPIPEEMPTY end_while_label_1
# line 174: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 175: procedurecall     apply_next_scan_point()
  JMPNINTERRUPT apply_next_scan_point
  LDWR INTERRUPT_EXITCODE
  WAIT
  WRITEPIPE
  END
apply_next_scan_point:  READPIPEINDF
  WRITEPIPEINDF
  READPIPE
  WRITEPIPE
  STWI
  JMPCMP apply_next_scan_point
# line 177 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 178 while_statement     while currentexperiment < experiments:
while_label_2: NOP
# line 178 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_2
# line 179: procedurecall         set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 180: procedurecall         cool()
# line 88: procedurecall     docool()
# line 82: procedurecall     pulse( shutter=CoolingOn, counter=CheckIonCounters, duration=CoolingTime, end_shutter=CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CheckIonCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 84 assignment     coolPhotons = load_count( PMTChannel )
# line 84: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 85: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 89 if statement     if MaxInitRepeat>0:
# line 89 condition     if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_3
# IF block
# line 90 assignment         initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 91 while_statement         while coolPhotons<PresenceThreshold:
while_label_4: NOP
# line 91 condition         while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_4
# line 92 if statement             if initRemaining==0:
# line 92 condition             if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_5
# IF block
# line 93: procedurecall                 exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_5: NOP
# end if
# line 94: add_assignment:             initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 95: procedurecall             docool()
# line 82: procedurecall     pulse( shutter=CoolingOn, counter=CheckIonCounters, duration=CoolingTime, end_shutter=CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CheckIonCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 84 assignment     coolPhotons = load_count( PMTChannel )
# line 84: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 85: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_4
end_while_label_4: NOP
# end while
end_if_label_3: NOP
# end if
# line 181 if statement         if PumpTime>0:
# line 181 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_6
# IF block
# line 182: procedurecall             pump()
# line 98: procedurecall     pulse( shutter=PumpingOn, duration=PumpTime )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, PumpTime
  COUNTERMASK NULL
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_6: NOP
# end if
# line 183 if statement         if PreWaitTime>0:
# line 183 condition         if PreWaitTime>0:
  LDWR PreWaitTime
  JMPZ end_if_label_7
# IF block
# line 184: procedurecall             update( PreWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PreWaitTime
end_if_label_7: NOP
# end if
# line 185 if statement         if MicrowaveInitTime>0:
# line 185 condition         if MicrowaveInitTime>0:
  LDWR MicrowaveInitTime
  JMPZ end_if_label_8
# IF block
# line 186: procedurecall             qubitInit()
# line 101: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 102: procedurecall     pulse( shutter=MicrowaveOn, trigger=ddsMicrowaveApply, duration=MicrowaveInitTime )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsMicrowaveApply
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, MicrowaveInitTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_8: NOP
# end if
# line 187 if statement         if GateInit>0:
# line 187 condition         if GateInit>0:
  LDWR GateInit
  JMPZ end_if_label_9
# IF block
# line 188: procedurecall            gateInit()
# line 105: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 106 assignment     temp = GateTime
  LDWR GateTime
  STWR temp
# line 107: add_assignment:     temp *= GateInit
  LDWR temp
  MULTW GateInit
  STWR temp
# line 108: procedurecall     pulse( shutter=MicrowaveOn, trigger=ddsMicrowaveApply, duration=temp )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsMicrowaveApply
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, temp
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_9: NOP
# end if
# line 189 if statement         if UseGateSequence>0:
# line 189 condition         if UseGateSequence>0:
  LDWR UseGateSequence
  JMPZ end_if_label_10
# IF block
# line 190: procedurecall             gateSequence()
# line 129 assignment     PulsesRemaining = read_ram()
# line 129: procedurecall     PulsesRemaining = read_ram()
  RAMREAD
  STWR PulsesRemaining
# line 130 while_statement     while PulsesRemaining>0:
while_label_11: NOP
# line 130 condition     while PulsesRemaining>0:
  LDWR PulsesRemaining
  JMPZ end_while_label_11
# line 131: add_assignment:         PulsesRemaining -= 1
  DEC PulsesRemaining
  STWR PulsesRemaining
# line 132 assignment         trainPhase = read_ram()
# line 132: procedurecall         trainPhase = read_ram()
  RAMREAD
  STWR trainPhase
# line 133 assignment         gapTime = read_ram()
# line 133: procedurecall         gapTime = read_ram()
  RAMREAD
  STWR gapTime
# line 134 if statement         if gapTime>0:
# line 134 condition         if gapTime>0:
  LDWR gapTime
  JMPZ end_if_label_12
# IF block
# line 135: procedurecall             set_dds( channel=DDSMicrowave, phase=trainPhase )
  DDSPHS DDSMicrowave, trainPhase
# line 136: procedurecall             pulse( trigger=ddsMicrowaveApply, duration=gapTime )
  TRIGGER ddsMicrowaveApply
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, gapTime
  COUNTERMASK NULL
end_if_label_12: NOP
# end if
# line 137 assignment         pulseTime = read_ram()     # has to be given in units of pi/2 time
# line 137: procedurecall         pulseTime = read_ram()     # has to be given in units of pi/2 time
  RAMREAD
  STWR pulseTime
# line 138: add_assignment:         pulseTime *= GateTime
  LDWR pulseTime
  MULTW GateTime
  STWR pulseTime
# line 139 if statement         if pulseTime>0:
# line 139 condition         if pulseTime>0:
  LDWR pulseTime
  JMPZ end_if_label_13
# IF block
# line 140: add_assignment:             pulseTime += offset     # we don't want an exdended I
  LDWR pulseTime
  ADDW offset
  STWR pulseTime
# line 141: procedurecall             pulse( shutter=MicrowaveOn, duration=pulseTime )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, pulseTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 142: procedurecall             update( PostPulseWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostPulseWaitTime
end_if_label_13: NOP
# end if
  JMP while_label_11
end_while_label_11: NOP
# end while
end_if_label_10: NOP
# end if
# line 191 if statement         if QubitWaitTime>0:
# line 191 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_14
# IF block
# line 192: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_14: NOP
# end if
# line 193 if statement         if MicrowaveAnalyzeTime>0:
# line 193 condition         if MicrowaveAnalyzeTime>0:
  LDWR MicrowaveAnalyzeTime
  JMPZ end_if_label_15
# IF block
# line 194: procedurecall             qubitAnalyze()
# line 115: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveAnalyzePhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveAnalyzePhase
# line 116: procedurecall     pulse( shutter=MicrowaveOn, trigger=ddsMicrowaveApply, duration=MicrowaveAnalyzeTime )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsMicrowaveApply
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, MicrowaveAnalyzeTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_15: NOP
# end if
# line 195 if statement         if PostWaitTime>0:
# line 195 condition         if PostWaitTime>0:
  LDWR PostWaitTime
  JMPZ end_if_label_16
# IF block
# line 196: procedurecall             update( PostWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PostWaitTime
end_if_label_16: NOP
# end if
# line 197 if statement         if DetectTime>0:
# line 197 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_17
# IF block
# line 198: procedurecall             detect()
# line 119: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 120: procedurecall     pulse( shutter=DetectOn, counter=DetectCounters, trigger=ddsApplyTrigger, duration=DetectTime )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
  TRIGGER ddsApplyTrigger
  COUNTERMASK DetectCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, DetectTime
  COUNTERMASK NULL
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 121: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_17: NOP
# end if
# line 199 if statement         if CalibrateEvery>0:
# line 199 condition         if CalibrateEvery>0:
  LDWR CalibrateEvery
  JMPZ end_if_label_18
# IF block
# line 201: procedurecall             calibrate()
# line 145: procedurecall     cool()
# line 88: procedurecall     docool()
# line 82: procedurecall     pulse( shutter=CoolingOn, counter=CheckIonCounters, duration=CoolingTime, end_shutter=CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CheckIonCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 84 assignment     coolPhotons = load_count( PMTChannel )
# line 84: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 85: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 89 if statement     if MaxInitRepeat>0:
# line 89 condition     if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_19
# IF block
# line 90 assignment         initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 91 while_statement         while coolPhotons<PresenceThreshold:
while_label_20: NOP
# line 91 condition         while coolPhotons<PresenceThreshold:
  LDWR coolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_20
# line 92 if statement             if initRemaining==0:
# line 92 condition             if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_21
# IF block
# line 93: procedurecall                 exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_21: NOP
# end if
# line 94: add_assignment:             initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 95: procedurecall             docool()
# line 82: procedurecall     pulse( shutter=CoolingOn, counter=CheckIonCounters, duration=CoolingTime, end_shutter=CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CheckIonCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 83: procedurecall     update( )
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 84 assignment     coolPhotons = load_count( PMTChannel )
# line 84: procedurecall     coolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR coolPhotons
# line 85: procedurecall     set_inv_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
  JMP while_label_20
end_while_label_20: NOP
# end while
end_if_label_19: NOP
# end if
# line 146 if statement     if PumpTime>0:
# line 146 condition     if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_22
# IF block
# line 147: procedurecall         pump()
# line 98: procedurecall     pulse( shutter=PumpingOn, duration=PumpTime )
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, PumpTime
  COUNTERMASK NULL
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
end_if_label_22: NOP
# end if
# line 148 assignment     MicrowaveCalibrationTime = GateTime
  LDWR GateTime
  STWR MicrowaveCalibrationTime
# line 149: add_assignment:     MicrowaveCalibrationTime *= CalibrationGates
  LDWR MicrowaveCalibrationTime
  MULTW CalibrationGates
  STWR MicrowaveCalibrationTime
# line 150: procedurecall     calibrationPulse()
# line 111: procedurecall     set_dds( channel=DDSMicrowave, freq=MicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ DDSMicrowave, MicrowaveFreq
  DDSPHS DDSMicrowave, MicrowaveInitPhase
# line 112: procedurecall     pulse( shutter=MicrowaveOn, trigger=ddsMicrowaveApply, duration=MicrowaveCalibrationTime )
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsMicrowaveApply
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, MicrowaveCalibrationTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 151 if statement     if DetectTime>0:
# line 151 condition     if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_23
# IF block
# line 152: procedurecall         calibrationDetect()
# line 124: procedurecall     set_dds( channel=DDSDetect, freq=DetectFreq )
  DDSFRQ DDSDetect, DetectFreq
# line 125: procedurecall     pulse( shutter=DetectOn, counter=CalibrationCounters, trigger=ddsApplyTrigger, duration=DetectTime )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
  TRIGGER ddsApplyTrigger
  COUNTERMASK CalibrationCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, DetectTime
  COUNTERMASK NULL
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 126: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 153 assignment         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
# line 153: procedurecall         CalibrationDetectPhotons = load_count(CalibrationCounterNo)
  NOP
  LDCOUNT CalibrationCounterNo
  STWR CalibrationDetectPhotons
# line 154 if statement         if CalibrationDetectPhotons > DetectThreshold:
# line 154 condition         if CalibrationDetectPhotons > DetectThreshold:
  LDWR CalibrationDetectPhotons
  CMPGREATER DetectThreshold
  JMPNCMP else_label_24
# IF block
# line 155: add_assignment:             PiTimeIntegrator -= 1
  DEC PiTimeIntegrator
  STWR PiTimeIntegrator
  JMP end_if_label_24
else_label_24: NOP
# ELSE block
# line 157: add_assignment:             PiTimeIntegrator += 1
  INC PiTimeIntegrator
  STWR PiTimeIntegrator
end_if_label_24: NOP
# end if
# line 158: procedurecall         write_result( DebugChannel, CalibrationDetectPhotons )
  WRITERESULTTOPIPE DebugChannel, CalibrationDetectPhotons
# line 159: shiftexpression         GateTime = PiTimeIntegrator >> NumberIgnoredBits
  LDWR PiTimeIntegrator
  SHR NumberIgnoredBits
# line 159 assignment         GateTime = PiTimeIntegrator >> NumberIgnoredBits
  STWR GateTime
# line 160: shiftexpression         piTime = GateTime >> one
  LDWR GateTime
  SHR one
# line 160 assignment         piTime = GateTime >> one
  STWR piTime
# line 161: procedurecall         write_result( PiTimeChannel, PiTimeIntegrator )
  WRITERESULTTOPIPE PiTimeChannel, PiTimeIntegrator
end_if_label_23: NOP
# end if
end_if_label_18: NOP
# end if
# line 205: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_2
end_while_label_2: NOP
# end while
  JMP while_label_1
end_while_label_1: NOP
# end while
# line 207: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END
