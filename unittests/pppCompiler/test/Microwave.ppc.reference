# autogenerated 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSLock_370 9
const TickleDDS 2
const Microwave2DDS 6
const MicrowaveDDS 7
const PMTChannel 1
const PiCalibrator 16
const FreqCalibrator 17
const TestChan 18
const TestChan2 19
# variables 
var NULL 0
var FFFFFFFF 18446744073709551615
var INTERRUPT_EXITCODE 18446198715942174720
var inlinevar_3 9
var inlinevar_4 2
var inlinevar_5 6
var inlinevar_6 7
var inlinevar_7 1
var inlinevar_8 16
var inlinevar_9 17
var inlinevar_10 18
var inlinevar_11 19
var InitializationShutter 0, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var TickleOn_mask 0, mask
var TickleOn 0, shutter TickleOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var Microwave1On_mask 0, mask
var Microwave1On 0, shutter Microwave1On_mask
var Microwave2On_mask 0, mask
var Microwave2On 0, shutter Microwave2On_mask
var CoolingFreq 230, parameter, MHz, AD9912_FRQ
var DetectFreq 250, parameter, MHz, AD9912_FRQ
var TickleFreq 0, parameter, MHz, AD9912_FRQ
var AppliedTickleFreq 0, parameter, MHz, AD9912_FRQ
var AppliedMicrowaveFreq 0, parameter, MHz, AD9912_FRQ
var MicrowaveFreqOffset 0, parameter, MHz, AD9912_FRQ_SIGN
var AppliedMicrowave2Freq 0, parameter, MHz, AD9912_FRQ
var Microwave2FreqOffset 0, parameter, MHz, AD9912_FRQ_SIGN
var MicrowaveFreqConst 0, parameter, MHz, AD9912_FRQ
var SpinEchoPhase 180, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var Microwave2AnalyzePhase 0, parameter, , AD9912_PHASE
var Microwave2InitPhase 0, parameter, , AD9912_PHASE
var xPhi 0, parameter, , AD9912_PHASE
var xPhim 0, parameter, , AD9912_PHASE
var xPhi1 0, parameter, , AD9912_PHASE
var xPhi2 0, parameter, , AD9912_PHASE
var yPhi 0, parameter, , AD9912_PHASE
var yPhi1 0, parameter, , AD9912_PHASE
var yPhi2 0, parameter, , AD9912_PHASE
var CoolingTime 2, parameter, ms
var PumpTime 100, parameter, us
var PumpHoldTime 4, parameter, us
var DetectTime 1, parameter, ms
var ResetHold 1, parameter, ms
var piTime 20, parameter, us
var piTime2 20, parameter, us
var MicrowaveLoop 1, parameter
var MicrowaveInitTime 40, parameter, us
var MicrowaveAnalyzeTime 10, parameter, us
var Microwave2InitTime 40, parameter, us
var Microwave2AnalyzeTime 10, parameter, us
var MicrowaveAmp 0, parameter
var Microwave2Amp 1000, parameter
var QubitWaitTime 0, parameter, ms
var SpinEchoTime 0, parameter, ms
var updateTime 20, parameter, us
var experiments 100, parameter
var MaxInitRepeat 20, parameter
var PresenceThreshold 10, parameter, kHz
var pulsenum 5, parameter
var CalibrateEvery 5, parameter
var CalibrateFreqEvery 1, parameter
var MicrowaveCalGateNum 21, parameter
var MicroFreqCalGateNum 10, parameter
var FreqCalAdjust 8, parameter, Hz
var DetectThreshold 1, parameter
var SyncTime 0, parameter
var pulseTime 0, parameter
var PostPulseWaitTime 0, parameter
var WaitForRam 10, parameter, us
var BoolFreqScan 0, parameter
var BoolTickle 0, parameter
var BooluWaveScan 0, parameter
var BoolSpinEcho 0, parameter
var BoolGateSequence 0, parameter
var BoolPiTimeCal 0, parameter
var BoolExpSync 0, parameter
var CoolingCounters 0, counter
var DetectCounters 0, counter
var CalibrationCounters 0, counter
var Calibration2Counters 0, counter
var ddsApplyAll 0, trigger
var ddsLockPt 0, trigger
var ddsuwave 0, trigger
var uWaveReset 0, trigger
var endLabel 0xfffe000000000000, exitcode
var IonLostExitcode 0xfffe000000000001, exitcode
var currentexperiment 0
var piTimeIntegrator 0
var CoolPhotons 0
var initRemaining 0
var repetitionCounter 0
var SequenceRepetitions 1
var trainPhase 0
var PulsesRemaining 0
var pitime2 0
var gateId 0
var zero 0
var one 1
var two 2
var five 5
var CalibrationDetectPhotons 0
var PiTimeIntegrator 0
var Calibration2DetectPhotons 0
var FreqIntegrator 0
var CalibrationSkipCounter 0
var CalFreqSkipCounter 0
var NumberIgnoredBits 3
var CalPulseTime 0
var FreqCalTime 0
var AppliedFreqCal 0
var GateT 0
var testv 0
var RamStartAddress 0, address
var inlinevar_12 8
var inlinevar_13 4
var inlinevar_14 3
var inlinevar_15 5
# inline variables
# end header

# line 120: shiftexpression pitime2 = piTime *2
  LDWR piTime
  MULTW inlinevar_4
# line 120 assignment pitime2 = piTime *2
  STWR pitime2
# line 137: shiftexpression GateT = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 137 assignment GateT = piTime/2
  STWR GateT
# line 408: procedurecall set_shutter(InitializationShutter)
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 409: procedurecall update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 410: procedurecall set_sync_time(SyncTime)
  SETSYNCTIME SyncTime
# line 412 if statement if BoolTickle == 1:
# line 412 condition if BoolTickle == 1:
  LDWR BoolTickle
  CMPEQUAL inlinevar_7
  JMPNCMP end_if_label_1
# IF block
# line 413: procedurecall     set_shutter(TickleOn)
  SHUTTERMASK TickleOn_mask
  ASYNCSHUTTER TickleOn
# line 414: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_1: NOP
# end if
# line 416: shiftexpression PiTimeIntegrator = GateT << NumberIgnoredBits
  LDWR GateT
  SHL NumberIgnoredBits
# line 416 assignment PiTimeIntegrator = GateT << NumberIgnoredBits
  STWR PiTimeIntegrator
# line 417: shiftexpression FreqIntegrator = AppliedMicrowaveFreq - MicrowaveFreqConst
  LDWR AppliedMicrowaveFreq
  SUBW MicrowaveFreqConst
# line 417 assignment FreqIntegrator = AppliedMicrowaveFreq - MicrowaveFreqConst
  STWR FreqIntegrator
# line 419 while_statement while not pipe_empty():
while_label_2: NOP
    JMPPIPEEMPTY end_while_label_2
# line 420: procedurecall     apply_next_scan_point()
  JMPNINTERRUPT apply_next_scan_point_label_0
  LDWR INTERRUPT_EXITCODE
  WAIT
  WRITEPIPE
  END
apply_next_scan_point_label_0:  READPIPEINDF
  WRITEPIPEINDF
  READPIPE
  WRITEPIPE
  STWI
  JMPCMP apply_next_scan_point_label_0
# line 421 if statement     if BoolPiTimeCal==0:
# line 421 condition     if BoolPiTimeCal==0:
  LDWR BoolPiTimeCal
  JMPNZ end_if_label_3
# IF block
# line 422: shiftexpression         GateT=piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 422 assignment         GateT=piTime/2
  STWR GateT
end_if_label_3: NOP
# end if
# line 425 if statement     if BoolTickle ==1:
# line 425 condition     if BoolTickle ==1:
  LDWR BoolTickle
  CMPEQUAL inlinevar_7
  JMPNCMP end_if_label_4
# IF block
# line 426: procedurecall         set_dds( channel=TickleDDS, freq=AppliedTickleFreq )
  DDSFRQ TickleDDS, AppliedTickleFreq
end_if_label_4: NOP
# end if
# line 429: procedurecall     set_dds( channel=DDSLock_370, freq=CoolingFreq )
  DDSFRQ DDSLock_370, CoolingFreq
# line 430: procedurecall     set_dds( channel=MicrowaveDDS, freq=AppliedMicrowaveFreq, phase=MicrowaveInitPhase, amp=MicrowaveAmp)
  DDSFRQ MicrowaveDDS, AppliedMicrowaveFreq
  DDSPHS MicrowaveDDS, MicrowaveInitPhase
  DDSAMP MicrowaveDDS, MicrowaveAmp
# line 431: procedurecall     set_dds( channel=Microwave2DDS, freq=AppliedMicrowave2Freq, phase=Microwave2InitPhase, amp=MicrowaveAmp)
  DDSFRQ Microwave2DDS, AppliedMicrowave2Freq
  DDSPHS Microwave2DDS, Microwave2InitPhase
  DDSAMP Microwave2DDS, MicrowaveAmp
# line 432: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 433: procedurecall     update( updateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE updateTime
# line 434: procedurecall     set_dds( channel=MicrowaveDDS, freq=AppliedMicrowaveFreq, phase=MicrowaveInitPhase, amp=MicrowaveAmp )
  DDSFRQ MicrowaveDDS, AppliedMicrowaveFreq
  DDSPHS MicrowaveDDS, MicrowaveInitPhase
  DDSAMP MicrowaveDDS, MicrowaveAmp
# line 435: procedurecall     set_dds( channel=Microwave2DDS, freq=AppliedMicrowave2Freq, phase=Microwave2InitPhase, amp=MicrowaveAmp)
  DDSFRQ Microwave2DDS, AppliedMicrowave2Freq
  DDSPHS Microwave2DDS, Microwave2InitPhase
  DDSAMP Microwave2DDS, MicrowaveAmp
# line 436: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 437: procedurecall     update( updateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE updateTime
# line 439 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 440 while_statement     while currentexperiment < experiments:
while_label_5: NOP
# line 440 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_5
# line 441: procedurecall         set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 442: procedurecall         cool()
# line 143 if statement     if BoolFreqScan>0:
# line 143 condition     if BoolFreqScan>0:
  LDWR BoolFreqScan
  JMPZ end_if_label_6
# IF block
# line 144: procedurecall         set_dds( channel=DDSLock_370, freq=CoolingFreq )
  DDSFRQ DDSLock_370, CoolingFreq
# line 145: procedurecall         set_trigger( ddsLockPt )
  TRIGGER ddsLockPt
end_if_label_6: NOP
# end if
# line 146: procedurecall     pulse(shutter=CoolingOn, counter=CoolingCounters, duration=CoolingTime)
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CoolingCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 147 assignment     CoolPhotons = load_count( PMTChannel )
# line 147: procedurecall     CoolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR CoolPhotons
# line 148: procedurecall     update( PumpHoldTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpHoldTime
# line 443 if statement         if MaxInitRepeat>0:
# line 443 condition         if MaxInitRepeat>0:
  LDWR MaxInitRepeat
  JMPZ end_if_label_7
# IF block
# line 444: procedurecall             adaptiveCool()
# line 151 assignment     initRemaining = MaxInitRepeat
  LDWR MaxInitRepeat
  STWR initRemaining
# line 152 while_statement     while CoolPhotons<PresenceThreshold:
while_label_8: NOP
# line 152 condition     while CoolPhotons<PresenceThreshold:
  LDWR CoolPhotons
  CMPLESS PresenceThreshold
  JMPNCMP end_while_label_8
# line 153 if statement         if initRemaining==0:
# line 153 condition         if initRemaining==0:
  LDWR initRemaining
  JMPNZ end_if_label_9
# IF block
# line 154: procedurecall             exit( IonLostExitcode )
  LDWR IonLostExitcode
  WAIT
  WRITEPIPE
  END
end_if_label_9: NOP
# end if
# line 155: add_assignment:         initRemaining -= 1
  DEC initRemaining
  STWR initRemaining
# line 156: procedurecall         cool()
# line 143 if statement     if BoolFreqScan>0:
# line 143 condition     if BoolFreqScan>0:
  LDWR BoolFreqScan
  JMPZ end_if_label_10
# IF block
# line 144: procedurecall         set_dds( channel=DDSLock_370, freq=CoolingFreq )
  DDSFRQ DDSLock_370, CoolingFreq
# line 145: procedurecall         set_trigger( ddsLockPt )
  TRIGGER ddsLockPt
end_if_label_10: NOP
# end if
# line 146: procedurecall     pulse(shutter=CoolingOn, counter=CoolingCounters, duration=CoolingTime)
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CoolingCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 147 assignment     CoolPhotons = load_count( PMTChannel )
# line 147: procedurecall     CoolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR CoolPhotons
# line 148: procedurecall     update( PumpHoldTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpHoldTime
  JMP while_label_8
end_while_label_8: NOP
# end while
end_if_label_7: NOP
# end if
# line 447 if statement         if PumpTime>0:
# line 447 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_11
# IF block
# line 448: procedurecall             pump()
# line 167: procedurecall     pulse(shutter=PumpingOn, duration=PumpTime)
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, PumpTime
  COUNTERMASK NULL
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
# line 168: procedurecall     update( PumpHoldTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpHoldTime
end_if_label_11: NOP
# end if
# line 451 if statement         if BoolGateSequence>0:
# line 451 condition         if BoolGateSequence>0:
  LDWR BoolGateSequence
  JMPZ end_if_label_12
# IF block
# line 452 assignment             repetitionCounter = 0
  LDWR NULL
  STWR repetitionCounter
# line 453 while_statement             while repetitionCounter<SequenceRepetitions:
while_label_13: NOP
# line 453 condition             while repetitionCounter<SequenceRepetitions:
  LDWR repetitionCounter
  CMPLESS SequenceRepetitions
  JMPNCMP end_while_label_13
# line 454: add_assignment:                 repetitionCounter += 1
  INC repetitionCounter
  STWR repetitionCounter
# line 455: procedurecall                 gateSequence()
# line 287 assignment     PulsesRemaining = read_ram()
# line 287: procedurecall     PulsesRemaining = read_ram()
  RAMREAD
  STWR PulsesRemaining
# line 288 while_statement     while PulsesRemaining>0:
while_label_14: NOP
# line 288 condition     while PulsesRemaining>0:
  LDWR PulsesRemaining
  JMPZ end_while_label_14
# line 289: add_assignment:         PulsesRemaining -= 1
  DEC PulsesRemaining
  STWR PulsesRemaining
# line 290 assignment         gateId = read_ram()
# line 290: procedurecall         gateId = read_ram()
  RAMREAD
  STWR gateId
# line 292 if statement         if gateId<4:
# line 292 condition         if gateId<4:
  LDWR gateId
  CMPLESS inlinevar_13
  JMPNCMP else_label_15
# IF block
# line 293 if statement             if gateId==0:
# line 293 condition             if gateId==0:
  LDWR gateId
  JMPNZ else_label_16
# IF block
# line 294: procedurecall                 waitIGate()
# line 229 assignment     pulseTime = 1
  LDWR inlinevar_7
  STWR pulseTime
# line 230: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 231: add_assignment:     pulseTime += PostPulseWaitTime
  LDWR pulseTime
  ADDW PostPulseWaitTime
  STWR pulseTime
# line 232: procedurecall     update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 295: procedurecall                 write_result(TestChan, zero)
  WRITERESULTTOPIPE TestChan, zero
  JMP end_if_label_16
else_label_16: NOP
# ELSE block
# line 297 if statement                 if gateId==1:
# line 297 condition                 if gateId==1:
  LDWR gateId
  CMPEQUAL inlinevar_7
  JMPNCMP else_label_17
# IF block
# line 298: procedurecall                     straightXGate()
# line 259 assignment     trainPhase = xPhi
  LDWR xPhi
  STWR trainPhase
# line 260 assignment     pulseTime = 1     # has to be given in units of pi/2 time
  LDWR inlinevar_7
  STWR pulseTime
# line 261: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 299: procedurecall                     write_result(TestChan, one)
  WRITERESULTTOPIPE TestChan, one
  JMP end_if_label_17
else_label_17: NOP
# ELSE block
# line 301 if statement                     if gateId==2:
# line 301 condition                     if gateId==2:
  LDWR gateId
  CMPEQUAL inlinevar_4
  JMPNCMP else_label_18
# IF block
# line 302: procedurecall                         straightYGate()
# line 282 assignment     trainPhase = yPhi
  LDWR yPhi
  STWR trainPhase
# line 283 assignment     pulseTime = 1     # has to be given in units of pi/2 time
  LDWR inlinevar_7
  STWR pulseTime
# line 284: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 303: procedurecall                         write_result(TestChan, two)
  WRITERESULTTOPIPE TestChan, two
  JMP end_if_label_18
else_label_18: NOP
# ELSE block
# line 305 if statement                         if gateId==3:
# line 305 condition                         if gateId==3:
  LDWR gateId
  CMPEQUAL inlinevar_14
  JMPNCMP end_if_label_19
# IF block
# line 306: procedurecall                             simpleiGate()
# line 220 assignment     trainPhase = xPhi
  LDWR xPhi
  STWR trainPhase
# line 221 assignment     pulseTime = 2     # has to be given in units of pi/2 time
  LDWR inlinevar_4
  STWR pulseTime
# line 222: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 224 assignment     trainPhase = xPhim
  LDWR xPhim
  STWR trainPhase
# line 225 assignment     pulseTime = 2     # has to be given in units of pi/2 time
  LDWR inlinevar_4
  STWR pulseTime
# line 226: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
end_if_label_19: NOP
# end if
end_if_label_18: NOP
# end if
end_if_label_17: NOP
# end if
end_if_label_16: NOP
# end if
  JMP end_if_label_15
else_label_15: NOP
# ELSE block
# line 308 if statement             if gateId==5:
# line 308 condition             if gateId==5:
  LDWR gateId
  CMPEQUAL inlinevar_15
  JMPNCMP else_label_20
# IF block
# line 309: procedurecall                 waitIGate()
# line 229 assignment     pulseTime = 1
  LDWR inlinevar_7
  STWR pulseTime
# line 230: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 231: add_assignment:     pulseTime += PostPulseWaitTime
  LDWR pulseTime
  ADDW PostPulseWaitTime
  STWR pulseTime
# line 232: procedurecall     update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
# line 310: procedurecall                 write_result(TestChan, five)
  WRITERESULTTOPIPE TestChan, five
  JMP end_if_label_20
else_label_20: NOP
# ELSE block
# line 312 if statement                 if gateId==6:
# line 312 condition                 if gateId==6:
  LDWR gateId
  CMPEQUAL inlinevar_5
  JMPNCMP else_label_21
# IF block
# line 313: procedurecall                     straightXGate()
# line 259 assignment     trainPhase = xPhi
  LDWR xPhi
  STWR trainPhase
# line 260 assignment     pulseTime = 1     # has to be given in units of pi/2 time
  LDWR inlinevar_7
  STWR pulseTime
# line 261: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
  JMP end_if_label_21
else_label_21: NOP
# ELSE block
# line 315 if statement                     if gateId==7:
# line 315 condition                     if gateId==7:
  LDWR gateId
  CMPEQUAL inlinevar_6
  JMPNCMP else_label_22
# IF block
# line 316: procedurecall                         straightYGate()
# line 282 assignment     trainPhase = yPhi
  LDWR yPhi
  STWR trainPhase
# line 283 assignment     pulseTime = 1     # has to be given in units of pi/2 time
  LDWR inlinevar_7
  STWR pulseTime
# line 284: procedurecall     gatePulse()
# line 191: procedurecall     set_dds( channel=MicrowaveDDS, phase=trainPhase )
  DDSPHS MicrowaveDDS, trainPhase
# line 192: procedurecall     set_trigger( ddsuwave )
  TRIGGER ddsuwave
# line 194: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 195: shiftexpression     testv = piTime/2
  LDWR piTime
  DIVW inlinevar_4
# line 195 assignment     testv = piTime/2
  STWR testv
# line 197: procedurecall     set_shutter( Microwave1On )
  SHUTTERMASK Microwave1On_mask
  ASYNCSHUTTER Microwave1On
# line 198: procedurecall     update( pulseTime, pulse_mode=False )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
  JMP end_if_label_22
else_label_22: NOP
# ELSE block
# line 318 if statement                         if gateId==8:
# line 318 condition                         if gateId==8:
  LDWR gateId
  CMPEQUAL inlinevar_12
  JMPNCMP end_if_label_23
# IF block
# line 319: procedurecall                             longWaitIGate()
# line 235 assignment     pulseTime = 8
  LDWR inlinevar_12
  STWR pulseTime
# line 236: add_assignment:     pulseTime *= GateT
  LDWR pulseTime
  MULTW GateT
  STWR pulseTime
# line 237: add_assignment:     pulseTime += PostPulseWaitTime
  LDWR pulseTime
  ADDW PostPulseWaitTime
  STWR pulseTime
# line 238: procedurecall     update( pulseTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE pulseTime
end_if_label_23: NOP
# end if
end_if_label_22: NOP
# end if
end_if_label_21: NOP
# end if
end_if_label_20: NOP
# end if
end_if_label_15: NOP
# end if
  JMP while_label_14
end_while_label_14: NOP
# end while
# line 456: procedurecall                 update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 457 if statement                 if repetitionCounter<SequenceRepetitions:
# line 457 condition                 if repetitionCounter<SequenceRepetitions:
  LDWR repetitionCounter
  CMPLESS SequenceRepetitions
  JMPNCMP end_if_label_24
# IF block
# line 458: procedurecall                     set_ram_address( RamStartAddress )
  SETRAMADDR RamStartAddress
# line 459: procedurecall                     update( WaitForRam )
  WAITDDSWRITEDONE
  WAIT
  UPDATE WaitForRam
end_if_label_24: NOP
# end if
  JMP while_label_13
end_while_label_13: NOP
# end while
end_if_label_12: NOP
# end if
# line 468 if statement         if DetectTime>0:
# line 468 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_25
# IF block
# line 469: procedurecall             detect()
# line 323 if statement     if BoolFreqScan==1:
# line 323 condition     if BoolFreqScan==1:
  LDWR BoolFreqScan
  CMPEQUAL inlinevar_7
  JMPNCMP end_if_label_26
# IF block
# line 324: procedurecall         set_dds( channel=DDSLock_370, freq=DetectFreq )
  DDSFRQ DDSLock_370, DetectFreq
# line 325: procedurecall         set_trigger( ddsLockPt )
  TRIGGER ddsLockPt
end_if_label_26: NOP
# end if
# line 326: procedurecall     update ( updateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE updateTime
# line 327: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 328: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 329: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 330: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 331: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 332: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 333: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_25: NOP
# end if
# line 484: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_5
end_while_label_5: NOP
# end while
  JMP while_label_2
end_while_label_2: NOP
# end while
# line 486: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END