# autogenerated 
# DO NOT EDIT DIRECTLY
# The file will be overwritten by the compiler
#
# const values
const DDSLock_370 9
const TickleDDS 7
const MicrowaveDDS 5
const PMTChannel 1
# variables 
var NULL 0
var FFFFFFFF 18446744073709551615
var INTERRUPT_EXITCODE 18446198715942174720
var inlinevar_3 9
var inlinevar_4 7
var inlinevar_5 5
var inlinevar_6 1
var InitializationShutter 0, shutter
var CoolingOn_mask 0, mask
var CoolingOn 0, shutter CoolingOn_mask
var PumpingOn_mask 0, mask
var PumpingOn 0, shutter PumpingOn_mask
var DetectOn_mask 0, mask
var DetectOn 0, shutter DetectOn_mask
var TickleOn_mask 0, mask
var TickleOn 0, shutter TickleOn_mask
var MicrowaveOn_mask 0, mask
var MicrowaveOn 0, shutter MicrowaveOn_mask
var CoolingFreq 230, parameter, MHz, AD9912_FRQ
var DetectFreq 250, parameter, MHz, AD9912_FRQ
var TickleFreq 0, parameter, MHz, AD9912_FRQ
var AppliedTickleFreq 0, parameter, MHz, AD9912_FRQ
var AppliedMicrowaveFreq 0, parameter, MHz, AD9912_FRQ
var MicrowaveFreqOffset 0, parameter, MHz, AD9912_FRQ
var SpinEchoPhase 180, parameter, , AD9912_PHASE
var MicrowaveAnalyzePhase 0, parameter, , AD9912_PHASE
var MicrowaveInitPhase 0, parameter, , AD9912_PHASE
var CoolingTime 2, parameter, ms
var PumpTime 100, parameter, us
var PumpTime2 100, parameter, us
var DetectTime 1, parameter, ms
var piTime 20, parameter, us
var MicrowaveInitTime 40, parameter, us
var MicrowaveAnalyzeTime 10, parameter, us
var QubitWaitTime 0, parameter, ms
var SpinEchoTime 0, parameter, ms
var PumpHoldTime 2, parameter, us
var updateTime 100, parameter, ms
var experiments 100, parameter
var BoolFreqScan 0, parameter
var BoolTickle 0, parameter
var BooluWaveScan 0, parameter
var BoolSpinEcho 0, parameter
var CoolingCounters 0, counter
var DetectCounters 0, counter
var ddsApplyAll 0, trigger
var ddsLockPt 0, trigger
var ddsuwave 0, trigger
var endLabel 0xfffe000000000000, exitcode
var IonLostExitcode 0xfffe000000000001, exitcode
var currentexperiment 0
var piTimeIntegrator 0
var CoolPhotons 0
# inline variables
# end header

# line 134: procedurecall set_shutter(InitializationShutter)
  SHUTTERMASK FFFFFFFF
  ASYNCSHUTTER InitializationShutter
# line 135: procedurecall update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 137 if statement if BoolTickle == 1:
# line 137 condition if BoolTickle == 1:
  LDWR BoolTickle
  CMPEQUAL inlinevar_6
  JMPNCMP end_if_label_1
# IF block
# line 138: procedurecall     set_shutter(TickleOn)
  SHUTTERMASK TickleOn_mask
  ASYNCSHUTTER TickleOn
# line 139: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_1: NOP
# end if
# line 145 while_statement while not pipe_empty():
while_label_2: NOP
    JMPPIPEEMPTY end_while_label_2
# line 146: procedurecall     apply_next_scan_point()
  JMPNINTERRUPT apply_next_scan_point_label_0
  LDWR INTERRUPT_EXITCODE
  WAIT
  WRITEPIPE
  END
apply_next_scan_point_label_0:  READPIPEINDF
  WRITEPIPEINDF
  READPIPE
  WRITEPIPE
  STWI
  JMPCMP apply_next_scan_point_label_0
# line 149 if statement     if BoolTickle ==1:
# line 149 condition     if BoolTickle ==1:
  LDWR BoolTickle
  CMPEQUAL inlinevar_6
  JMPNCMP end_if_label_3
# IF block
# line 150: procedurecall         set_dds( channel=TickleDDS, freq=AppliedTickleFreq )  
  DDSFRQ TickleDDS, AppliedTickleFreq
end_if_label_3: NOP
# end if
# line 152: procedurecall     set_dds( channel=DDSLock_370, freq=CoolingFreq )
  DDSFRQ DDSLock_370, CoolingFreq
# line 153: procedurecall     set_dds( channel=MicrowaveDDS, freq=AppliedMicrowaveFreq, phase=MicrowaveInitPhase )
  DDSFRQ MicrowaveDDS, AppliedMicrowaveFreq
  DDSPHS MicrowaveDDS, MicrowaveInitPhase
# line 154: procedurecall     set_trigger( ddsApplyAll )
  TRIGGER ddsApplyAll
# line 155: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
# line 157 assignment     currentexperiment = 0
  LDWR NULL
  STWR currentexperiment
# line 158 while_statement     while currentexperiment < experiments:
while_label_4: NOP
# line 158 condition     while currentexperiment < experiments:
  LDWR currentexperiment
  CMPLESS experiments
  JMPNCMP end_while_label_4
# line 159: procedurecall         cool()
# line 69 if statement     if BoolFreqScan ==1:
# line 69 condition     if BoolFreqScan ==1:
  LDWR BoolFreqScan
  CMPEQUAL inlinevar_6
  JMPNCMP end_if_label_5
# IF block
# line 70: procedurecall         set_dds( channel=DDSLock_370, freq=CoolingFreq )
  DDSFRQ DDSLock_370, CoolingFreq
# line 71: procedurecall         set_trigger( ddsLockPt )
  TRIGGER ddsLockPt
end_if_label_5: NOP
# end if
# line 72: procedurecall     pulse(shutter=CoolingOn, counter=CoolingCounters, duration=CoolingTime)
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
  COUNTERMASK CoolingCounters
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, CoolingTime
  COUNTERMASK NULL
  SHUTTERMASK CoolingOn_mask
  ASYNCINVSHUTTER CoolingOn
# line 79 assignment     CoolPhotons = load_count( PMTChannel )
# line 79: procedurecall     CoolPhotons = load_count( PMTChannel )
  NOP
  LDCOUNT PMTChannel
  STWR CoolPhotons
# line 160 if statement         if PumpTime>0:
# line 160 condition         if PumpTime>0:
  LDWR PumpTime
  JMPZ end_if_label_6
# IF block
# line 161: procedurecall             pump()
# line 82: procedurecall     pulse(shutter=PumpingOn, duration=PumpTime)
  SHUTTERMASK PumpingOn_mask
  ASYNCSHUTTER PumpingOn
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, PumpTime
  COUNTERMASK NULL
  SHUTTERMASK PumpingOn_mask
  ASYNCINVSHUTTER PumpingOn
# line 83: procedurecall     update( PumpHoldTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE PumpHoldTime
end_if_label_6: NOP
# end if
# line 162 if statement         if MicrowaveInitTime>0:
# line 162 condition         if MicrowaveInitTime>0:
  LDWR MicrowaveInitTime
  JMPZ end_if_label_7
# IF block
# line 163: procedurecall             microwaveon()
# line 86: procedurecall     set_dds( channel=MicrowaveDDS, phase=MicrowaveInitPhase )
  DDSPHS MicrowaveDDS, MicrowaveInitPhase
# line 87 if statement     if BooluWaveScan == 1:
# line 87 condition     if BooluWaveScan == 1:
  LDWR BooluWaveScan
  CMPEQUAL inlinevar_6
  JMPNCMP end_if_label_8
# IF block
# line 88: procedurecall         set_dds( channel=MicrowaveDDS, freq=AppliedMicrowaveFreq )
  DDSFRQ MicrowaveDDS, AppliedMicrowaveFreq
end_if_label_8: NOP
# end if
# line 89: procedurecall     pulse(shutter=MicrowaveOn, trigger=ddsuwave,duration=MicrowaveInitTime)
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsuwave
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, MicrowaveInitTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_7: NOP
# end if
# line 164 if statement         if QubitWaitTime>0:
# line 164 condition         if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_9
# IF block
# line 165: procedurecall             update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_9: NOP
# end if
# line 166 if statement         if BoolSpinEcho>0:
# line 166 condition         if BoolSpinEcho>0:
  LDWR BoolSpinEcho
  JMPZ end_if_label_10
# IF block
# line 167: procedurecall             spinecho()
# line 93: procedurecall     set_dds( channel=MicrowaveDDS, phase=SpinEchoPhase )
  DDSPHS MicrowaveDDS, SpinEchoPhase
# line 94: procedurecall     pulse(shutter=MicrowaveOn, trigger=ddsuwave, duration=SpinEchoTime)
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsuwave
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, SpinEchoTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
# line 168 if statement             if QubitWaitTime>0:
# line 168 condition             if QubitWaitTime>0:
  LDWR QubitWaitTime
  JMPZ end_if_label_11
# IF block
# line 169: procedurecall                 update( QubitWaitTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE QubitWaitTime
end_if_label_11: NOP
# end if
end_if_label_10: NOP
# end if
# line 170 if statement         if MicrowaveAnalyzeTime>0:
# line 170 condition         if MicrowaveAnalyzeTime>0:
  LDWR MicrowaveAnalyzeTime
  JMPZ end_if_label_12
# IF block
# line 171: procedurecall             qubitAnalyze()
# line 97: procedurecall     set_dds( channel=MicrowaveDDS, phase=MicrowaveAnalyzePhase )
  DDSPHS MicrowaveDDS, MicrowaveAnalyzePhase
# line 98: procedurecall     pulse(shutter=MicrowaveOn, trigger=ddsuwave, duration=MicrowaveAnalyzeTime)
  SHUTTERMASK MicrowaveOn_mask
  ASYNCSHUTTER MicrowaveOn
  TRIGGER ddsuwave
  WAITDDSWRITEDONE
  WAIT
  UPDATE 1, MicrowaveAnalyzeTime
  COUNTERMASK NULL
  SHUTTERMASK MicrowaveOn_mask
  ASYNCINVSHUTTER MicrowaveOn
end_if_label_12: NOP
# end if
# line 172 if statement         if DetectTime>0:
# line 172 condition         if DetectTime>0:
  LDWR DetectTime
  JMPZ end_if_label_13
# IF block
# line 173: procedurecall             detect()
# line 112 if statement     if BoolFreqScan==1:
# line 112 condition     if BoolFreqScan==1:
  LDWR BoolFreqScan
  CMPEQUAL inlinevar_6
  JMPNCMP end_if_label_14
# IF block
# line 113: procedurecall         set_dds( channel=DDSLock_370, freq=DetectFreq )
  DDSFRQ DDSLock_370, DetectFreq
# line 114: procedurecall         set_trigger( ddsLockPt )
  TRIGGER ddsLockPt
end_if_label_14: NOP
# end if
# line 115: procedurecall     update ( updateTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE updateTime
# line 116: procedurecall     set_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCSHUTTER DetectOn
# line 117: procedurecall     set_counter( DetectCounters )
  COUNTERMASK DetectCounters
# line 118: procedurecall     update( DetectTime )
  WAITDDSWRITEDONE
  WAIT
  UPDATE DetectTime
# line 119: procedurecall     set_inv_shutter( DetectOn )
  SHUTTERMASK DetectOn_mask
  ASYNCINVSHUTTER DetectOn
# line 120: procedurecall     set_shutter( CoolingOn )
  SHUTTERMASK CoolingOn_mask
  ASYNCSHUTTER CoolingOn
# line 121: procedurecall     clear_counter()
  COUNTERMASK NULL
# line 122: procedurecall     update()
  WAITDDSWRITEDONE
  WAIT
  UPDATE NULL
end_if_label_13: NOP
# end if
# line 176: add_assignment:         currentexperiment += 1
  INC currentexperiment
  STWR currentexperiment
  JMP while_label_4
end_while_label_4: NOP
# end while
  JMP while_label_2
end_while_label_2: NOP
# end while
# line 178: procedurecall exit( endLabel )
  LDWR endLabel
  WAIT
  WRITEPIPE
  END